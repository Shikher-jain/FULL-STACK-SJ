# Sure! Below is the same basic CRUD example implemented in Django and MERN (MongoDB, Express, React, Node.js), where we display a list of items. I'll break it down step by step for both technologies.

# ---
# 1. Django Version (Backend + Frontend)
# 1.1 Backend: Django Setup
# Let's create a Django application that returns a list of items via an API.
# models.py (Defining the Item model)
# from django.db import models
# class Item(models.Model):
#     name = models.CharField(max_length=100)
#     def _str_(self):
#         return self.name
# serializers.py (For converting the data into JSON format)

# from rest_framework import serializers
# from .models import Item

# class ItemSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = Item
#         fields = ['id', 'name']

# views.py (Creating the API view)

# from rest_framework.views import APIView
# from rest_framework.response import Response
# from rest_framework import status
# from .models import Item
# from .serializers import ItemSerializer

# class ItemListView(APIView):
#     def get(self, request):
#         items = Item.objects.all()
#         serializer = ItemSerializer(items, many=True)
#         return Response(serializer.data, status=status.HTTP_200_OK)

# urls.py (API Routing)

# from django.urls import path
# from .views import ItemListView

# urlpatterns = [
#     path('api/items/', ItemListView.as_view(), name='item-list'),
# ]

# settings.py (Adding REST Framework and Static files)

# INSTALLED_APPS = [
#     ...
#     'rest_framework',
#     'yourapp',
# ]

# STATIC_URL = '/static/'

# # CORS headers to allow frontend (if needed)
# CORS_ALLOW_ALL_ORIGINS = True  # Use appropriate CORS settings if you separate backend and frontend

# 1.2 Frontend: Django Templates with JavaScript (AJAX)

# In this approach, we'll use Django templates to serve the HTML page and fetch data using JavaScript (fetch()).

# my_template.html

# <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <title>Items List</title>
#     <script>
#         // Fetch items from the Django API
#         function loadItems() {
#             fetch('/api/items/')
#                 .then(response => response.json())
#                 .then(data => {
#                     const list = document.getElementById('item-list');
#                     list.innerHTML = '';  // Clear the list
#                     data.forEach(item => {
#                         const li = document.createElement('li');
#                         li.textContent = item.name;
#                         list.appendChild(li);
#                     });
#                 });
#         }

#         // Load items when page loads
#         window.onload = loadItems;
#     </script>
# </head>
# <body>
#     <h1>Items List</h1>
#     <ul id="item-list"></ul>
# </body>
# </html>

# 2. MERN Version (Backend + Frontend)

# 2.1 Backend: Express + MongoDB

# Let’s create a simple Express app that connects to MongoDB and serves a list of items.

# app.js (Express Backend)

# const express = require('express');
# const mongoose = require('mongoose');
# const cors = require('cors');
# const app = express();

# // Middleware
# app.use(cors());
# app.use(express.json());

# // MongoDB connection
# mongoose.connect('mongodb://localhost:27017/mernapp', { useNewUrlParser: true, useUnifiedTopology: true });

# // Item Schema and Model
# const itemSchema = new mongoose.Schema({
#   name: String
# });

# const Item = mongoose.model('Item', itemSchema);

# // Get all items
# app.get('/api/items', async (req, res) => {
#   try {
#     const items = await Item.find();
#     res.json(items);
#   } catch (error) {
#     res.status(500).send('Error fetching items');
#   }
# });

# // Start the server
# app.listen(5000, () => {
#   console.log('Server is running on port 5000');
# });

# package.json (Dependencies)

# {
#   "name": "mernapp",
#   "version": "1.0.0",
#   "main": "app.js",
#   "scripts": {
#     "start": "node app.js"
#   },
#   "dependencies": {
#     "cors": "^2.8.5",
#     "express": "^4.17.1",
#     "mongoose": "^5.10.9"
#   }
# }

# 2.2 Frontend: React

# Now, let’s create the React frontend to fetch and display items from the Express backend.

# App.js (React Frontend)

# import React, { useEffect, useState } from 'react';

# function App() {
#   const [items, setItems] = useState([]);

#   useEffect(() => {
#     fetch('http://localhost:5000/api/items')
#       .then((response) => response.json())
#       .then((data) => setItems(data));
#   }, []);

#   return (
#     <div>
#       <h1>Items List</h1>
#       <ul>
#         {items.map((item) => (
#           <li key={item._id}>{item.name}</li>
#         ))}
#       </ul>
#     </div>
#   );
# }

# export default App;

# package.json (React Dependencies)

# {
#   "name": "reactfrontend",
#   "version": "1.0.0",
#   "main": "src/index.js",
#   "scripts": {
#     "start": "react-scripts start"
#   },
#   "dependencies": {
#     "react": "^17.0.2",
#     "react-dom": "^17.0.2",
#     "react-scripts": "4.0.3"
#   }
# }


# ---

# Step-by-Step Setup

# Django Setup

# 1. Install Django:

# pip install django


# 2. Create a new Django project and app:

# django-admin startproject myproject
# cd myproject
# django-admin startapp yourapp


# 3. Install Django REST Framework:

# pip install djangorestframework


# 4. Migrate the Database:

# python manage.py migrate


# 5. Run Django:

# python manage.py runserver



# MERN Setup

# 1. Install Node.js (if not already installed): Download Node.js.


# 2. Set up Backend (Express + MongoDB):

# Initialize the backend project:

# mkdir mern-backend
# cd mern-backend
# npm init -y
# npm install express mongoose cors

# Create the app.js file as described above.



# 3. Start the Backend:

# node app.js


# 4. Set up Frontend (React):

# In a new folder:

# npx create-react-app react-frontend
# cd react-frontend
# npm start



# 5. Edit App.js in your React frontend project to fetch data from the Express backend as shown above.




# ---

# How to Run Both Projects Together

# Django will run on http://localhost:8000 and serve the template-based app, which can also make API requests to http://localhost:8000/api/items/.

# MERN (Express + React):

# Backend will run on http://localhost:5000.

# Frontend will run on http://localhost:3000 (by default, React uses this port).

# ---

# Summary of Code Comparison:

# 1. Backend:

# Django uses Django REST Framework to expose API data.

# MERN uses Express to handle API requests and serve data from MongoDB.



# 2. Frontend:

# Django uses server-side rendered templates (with AJAX for dynamic behavior).

# MERN uses React to fetch data from the backend and display it in a dynamic, client-side-rendered way.




# Both setups display the same data from a list of items but with different approaches and tech stacks. If you're comfortable with Python, Django offers a lot of built-in features, while MERN uses a modern JavaScript stack that's more suitable for dynamic single-page applications.